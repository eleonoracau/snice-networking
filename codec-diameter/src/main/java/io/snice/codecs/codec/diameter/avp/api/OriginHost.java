package io.snice.codecs.codec.diameter.avp.api;


import io.snice.buffer.Buffer;
import io.snice.buffer.Buffers;
import io.snice.codecs.codec.diameter.avp.Avp;
import io.snice.codecs.codec.diameter.avp.AvpMandatory;
import io.snice.codecs.codec.diameter.avp.AvpParseException;
import io.snice.codecs.codec.diameter.avp.AvpProtected;
import io.snice.codecs.codec.diameter.avp.FramedAvp;
import io.snice.codecs.codec.diameter.avp.Vendor;
import io.snice.codecs.codec.diameter.avp.impl.DiameterIdentityAvp;
import io.snice.codecs.codec.diameter.avp.type.DiameterIdentity;

import static io.snice.preconditions.PreConditions.assertNotNull;

/**
 * This is an autogenerated class - do not edit
 * 
 */
public interface OriginHost extends Avp<DiameterIdentity> {

    int CODE = 264;

    
    static OriginHost of(final Buffer value) {
        final DiameterIdentity v = DiameterIdentity.parse(value);
        return of(v);
    }

    static OriginHost of(final String value) {
        return of(Buffers.wrap(value));
    }

    
    

    static OriginHost of(final DiameterIdentity value) {
        assertNotNull(value);
        final Builder<DiameterIdentity> builder =
                Avp.ofType(DiameterIdentity.class)
                        .withValue(value)
                        .withAvpCode(CODE)
                        .isMandatory(AvpMandatory.MUST.isMandatory())
                        .isProtected(AvpProtected.MAY.isProtected())
                        .withVendor(Vendor.NONE);

        return new DefaultOriginHost(builder.build());
    }

    @Override
    default long getCode() {
        return CODE;
    }

    @Override
    default boolean isOriginHost() {
        return true;
    }

    @Override
    default OriginHost toOriginHost() {
        return this;
    }

    static OriginHost parse(final FramedAvp raw) {
        if (CODE != raw.getCode()) {
            throw new AvpParseException("AVP Code mismatch - unable to parse the AVP into a " + OriginHost.class.getName());
        }
        return new DefaultOriginHost(raw);
    }

    class DefaultOriginHost extends DiameterIdentityAvp implements OriginHost {
        private DefaultOriginHost(final FramedAvp raw) {
            super(raw);
        }

        @Override
        public OriginHost ensure() {
            return this;
        }

        @Override
        public boolean equals(final Object other) {
            if (this == other) {
                return true;
            }

            if (other == null) {
                return false;
            }

            try {
                final OriginHost o = (OriginHost)((FramedAvp)other).ensure();
                final DiameterIdentity v = getValue();
                return v.equals(o.getValue());
            } catch (final ClassCastException e) {
                return false;
            }
        }
    }
}

package io.snice.networking.codec.diameter.avp.api;

import io.snice.buffer.Buffer;
import io.snice.buffer.Buffers;
import io.snice.networking.codec.diameter.avp.Avp;
import io.snice.networking.codec.diameter.avp.AvpMandatory;
import io.snice.networking.codec.diameter.avp.AvpParseException;
import io.snice.networking.codec.diameter.avp.AvpProtected;
import io.snice.networking.codec.diameter.avp.FramedAvp;
import io.snice.networking.codec.diameter.avp.Vendor;

import io.snice.networking.codec.diameter.avp.impl.DiameterIdentityAvp;
import io.snice.networking.codec.diameter.avp.type.DiameterIdentity;

/**
 * This is an autogenerated class - do not edit
 * 
 */
public interface OriginRealm extends Avp<DiameterIdentity> {

    int CODE = 296;

    
    static OriginRealm of(final Buffer value) {
        final DiameterIdentity v = DiameterIdentity.parse(value);
        final Builder<DiameterIdentity> builder =
                Avp.ofType(DiameterIdentity.class)
                        .withValue(v)
                        .withAvpCode(CODE)
                        .isMandatory(AvpMandatory.MUST.isMandatory())
                        .isProtected(AvpProtected.MUST_NOT.isProtected())
                        .withVendor(Vendor.NONE);

        return new DefaultOriginRealm(builder.build());
    }

    static OriginRealm of(final String value) {
        return of(Buffers.wrap(value));
    }
    

    @Override
    default long getCode() {
        return CODE;
    }

    default boolean isOriginRealm() {
        return true;
    }

    default OriginRealm toOriginRealm() {
        return this;
    }

    static OriginRealm parse(final FramedAvp raw) {
        if (CODE != raw.getCode()) {
            throw new AvpParseException("AVP Code mismatch - unable to parse the AVP into a " + OriginRealm.class.getName());
        }
        return new DefaultOriginRealm(raw);
    }

    class DefaultOriginRealm extends DiameterIdentityAvp implements OriginRealm {
        private DefaultOriginRealm(final FramedAvp raw) {
            super(raw);
        }
    }
}

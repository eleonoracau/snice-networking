package io.snice.networking.codec.diameter.avp.api;


import io.snice.networking.codec.diameter.avp.Avp;
import io.snice.networking.codec.diameter.avp.AvpMandatory;
import io.snice.networking.codec.diameter.avp.AvpParseException;
import io.snice.networking.codec.diameter.avp.AvpProtected;
import io.snice.networking.codec.diameter.avp.FramedAvp;
import io.snice.networking.codec.diameter.avp.Vendor;

import static io.snice.preconditions.PreConditions.assertCollectionNotEmpty;
import static io.snice.preconditions.PreConditions.assertNotNull;
import java.util.List;
import java.util.Optional;

import io.snice.networking.codec.diameter.avp.impl.DiameterGroupedAvp;
import io.snice.networking.codec.diameter.avp.type.Grouped;

/**
 * This is an autogenerated class - do not edit
 * 
 */
public interface SubscriptionData extends Avp<Grouped> {

    int CODE = 1400;

    
    static SubscriptionData of(final Avp... avps) {
        assertNotNull(avps, "The list of AVPs cannot be null");
        return of(List.of(avps));
    }

    static SubscriptionData of(final List<Avp> avps) {
        assertCollectionNotEmpty(avps, "The list of AVPs cannot be null or the empty list");
        return of(Grouped.of(avps));
    }

    /**
     * <p>
     * Get the {@link FramedAvp} based on its AVP code. Note that this is the "raw" un-parsed
     * AVP and you either have to call {@link FramedAvp#ensure()} if you want to fully ensure it.
     * </p>
     *
     * <p>
     * Note, if there are many {@link Avp}s of the same type, only the first
     * one will be returned.
     * </p>
     *
     * @param code the AVP code
     * @return the first AVP found that has the
     * specified AVP code, or an empty optional if none is found.
     */
    default Optional<? extends FramedAvp> getFramedAvp(long code) {
        return getValue().getFramedAvp(code);
    }

    default Optional<? extends FramedAvp> getFramedAvp(final int code) {
        return getValue().getFramedAvp(code);
    }

    /**
     * Get a list of all AVPs
     *
     * @return
     */
    default List<? extends FramedAvp> getAvps() {
        return getValue().getAvps();
    }

    

    static SubscriptionData of(final Grouped value) {
        assertNotNull(value);
        final Builder<Grouped> builder =
                Avp.ofType(Grouped.class)
                        .withValue(value)
                        .withAvpCode(CODE)
                        .isMandatory(AvpMandatory.MUST.isMandatory())
                        .isProtected(AvpProtected.MAY.isProtected())
                        .withVendor(Vendor.TGPP);

        return new DefaultSubscriptionData(builder.build());
    }

    @Override
    default long getCode() {
        return CODE;
    }

    default boolean isSubscriptionData() {
        return true;
    }

    default SubscriptionData toSubscriptionData() {
        return this;
    }

    static SubscriptionData parse(final FramedAvp raw) {
        if (CODE != raw.getCode()) {
            throw new AvpParseException("AVP Code mismatch - unable to parse the AVP into a " + SubscriptionData.class.getName());
        }
        return new DefaultSubscriptionData(raw);
    }

    class DefaultSubscriptionData extends DiameterGroupedAvp implements SubscriptionData {
        private DefaultSubscriptionData(final FramedAvp raw) {
            super(raw);
        }

        @Override
        public SubscriptionData ensure() {
            return this;
        }

        @Override
        public boolean equals(final Object other) {
            if (this == other) {
                return true;
            }

            if (other == null) {
                return false;
            }

            try {
                final SubscriptionData o = (SubscriptionData)((FramedAvp)other).ensure();
                final Grouped v = getValue();
                return v.equals(o.getValue());
            } catch (final ClassCastException e) {
                return false;
            }
        }
    }
}
